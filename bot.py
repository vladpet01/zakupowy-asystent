from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

# === –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å ===
def detect_language(code):
    return code if code in ["ru", "pl"] else "ru"

TRANSLATION_TABLE = {
    "ru": {
        "schab wieprzowy": "—Å–≤–∏–Ω–Ω–æ–π –∫–∞—Ä–±–æ–Ω–∞—Ç",
        "jogurt naturalny": "–π–æ–≥—É—Ä—Ç",
    },
    "pl": {
        "—Å–≤–∏–Ω–Ω–æ–π –∫–∞—Ä–±–æ–Ω–∞—Ç": "schab wieprzowy",
        "–π–æ–≥—É—Ä—Ç": "jogurt naturalny",
    }
}

def translate_for_search(product, lang):
    return TRANSLATION_TABLE["pl"].get(product.lower(), product)

def display_original(product, lang):
    return TRANSLATION_TABLE["ru"].get(product.lower(), product) if lang == "pl" else product

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
ENTERING_LIST = 1

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
main_menu = ReplyKeyboardMarkup(
    [["üìù –ù–∞–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫", "üîç –ü–æ–∏—Å–∫ —Å–∫–∏–¥–æ–∫ –ø–æ —Å–ø–∏—Å–∫—É"]],
    resize_keyboard=True
)

list_actions = ReplyKeyboardMarkup(
    [["üîç –ù–∞–π—Ç–∏ —Å–∫–∏–¥–∫–∏", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫"], ["üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", "üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = detect_language(update.effective_user.language_code)
    context.user_data["lang"] = lang
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?" if lang == "ru" else "Cze≈õƒá! Co chcesz zrobiƒá?",
        reply_markup=main_menu
    )

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìù –ù–∞–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return ENTERING_LIST
    elif text == "üîç –ü–æ–∏—Å–∫ —Å–∫–∏–¥–æ–∫ –ø–æ —Å–ø–∏—Å–∫—É":
        product_list = context.user_data.get("product_list", "")
        if not product_list:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
            return ConversationHandler.END
        lang = context.user_data.get("lang", "ru")
        lines = product_list.split("\n")
        results = []
        for line in lines:
            name = line.split("‚Äì")[0].strip()
            translated = translate_for_search(name, lang)
            # –ó–∞–≥–ª—É—à–∫–∞: –∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
            price = "17.99 z≈Ç" if translated == "schab wieprzowy" else "2.99 z≈Ç"
            store = "Leclerc"
            original = display_original(translated, lang)
            results.append(f"‚úÖ {original} ‚Äî {price} ({store})")
        await update.message.reply_text("\n".join(results))
        return ConversationHandler.END

async def receive_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["product_list"] = update.message.text
    await update.message.reply_text("‚úÖ –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=list_actions)
    return ConversationHandler.END

# === –ó–∞–ø—É—Å–∫ ===
app = ApplicationBuilder().token("8390475589:AAENaQ48Dn8cqrza_jY76_2ojXwIkdy8cyY").build()

conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)],
    states={
        ENTERING_LIST: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_list)]
    },
    fallbacks=[]
)

app.add_handler(CommandHandler("start", start))
app.add_handler(conv_handler)

app.run_polling()
